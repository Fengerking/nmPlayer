; generated by ARM/Thumb C/C++ Compiler, RVCT2.2 [Build 349]
; commandline armcc [--c90 --no_debug_macros -c --asm -oH264_D_ARMv4_RVDS_LIB_Data\Release\ObjectCode\Luma_InPlaceDeblock.o --cpu=ARM920T -O3 -Otime --diag_style=ide -I. -I..\..\..\..\Sources -I..\..\..\..\Sources\ARM9\ARMV4 -I..\..\..\..\..\..\..\..\VOIAPP\common\lib\ARM9\ELF -I..\..\..\..\Sources\IA32\C -I..\..\..\..\..\..\..\..\VOIAPP\common\inc -I"..\..\..\..\Sources\ARM9\for ARMCC" -I..\..\..\..\Sources\ARM9 -J"d:\Program Files\ARM\RVCT\Data\2.2\349\include\windows" -J"d:\Program Files\ARM\RVCT\Data\2.2\349\include\windows" -DNDEBUG -DARM -DARM_ASM -DRVDS --signed_chars --brief_diagnostics D:\source_safe_project\H264Codec\VideoCodec\H264\Decoder\Sources\ARM9\Luma_InPlaceDeblock.c]

        ;ARM
        ;REQUIRE8
        ;PRESERVE8

        AREA |.text|, CODE, READONLY, ALIGN=2

Luma_InPlaceDeblock PROC
        ;PUSH     {r0-r11,lr}
		stmfd   r13!, {r0-r11, r14} ;  14_1
        SUB      sp,sp,#0x28
        MOV      r8,r2,LSL #1
        ;for(j = 0; j < 16; j++, pt2 += srcInc)
        ADD      r3,r8,r2
        STR      r3,[sp,#0]
        LDR      r3,[sp,#0x34]
        LDR      r7,[sp,#0x5c]
        ADD      r1,r3,r3,LSL #1
        STR      r1,[sp,#0x24]
        MOV      r1,#2
        ADD      r3,r1,r7,ASR #2
        MOV      r6,#0
        STR      r3,[sp,#0x20]
        ;STR      r8,[sp,#4]
        ;if(!(str = pt1[j>>2])){
|L1.56|
        LDR      r1,[sp,#0x2c];r1 = pt1
        ;LDR      r8,[sp,#4];L1  = pt2[-inc2] ;
        MOV      r8,r2,LSL #1
        SUB      r11,r0,r2
        
        LDRB     r3,[r1,r6,ASR #2];r6=j,r3=str
        SUB      r4,r0,r8
        STR      r4,[sp,#0x1c]
        
        CMP      r3,#0
        LDREQ    r1,[sp,#0x24]
        STR      r3,[sp,#0xc]
        ADDEQ    r6,r6,#3
        ADDEQ    r0,r1,r0
        STREQ    r6,[sp,#0x4]
        BEQ      |L1.760|
        
        
        LDRB     r1,[r4,#0]
        STR      r11,[sp,#0x18]
        LDRB     r5,[r0,#0]
        LDRB     r12,[r0,r2]
        LDRB     r4,[r11,#0]
        LDR      r11,[sp,#0x60]
        SUBS     r3,r5,r12
        RSBMI    r3,r3,#0
        SUBS     r7,r4,r1
        RSBMI    r7,r7,#0
        CMP      r3,r11
        LDRLT    r11,[sp,#0x60];
        STR		 r6,[sp,#0x4]
        SUB      r9,r5,r4
        
        CMPLT    r7,r11
        BGE      |L1.760|
        
        CMP      r9,#0
        LDR      r7,[sp,#0x5c]
        RSBLE    r3,r9,#0
        MOVGT    r3,r9
        CMP      r3,r7
        STR      r3,[sp,#0x10]
        BGE      |L1.760|
        
        LDR      r3,[sp,#0]
        LDR      r11,[sp,#0x60];
        LDRB     r8,[r0,r2,LSL #1]
        
        SUB      r3,r0,r3
        STR      r3,[sp,#0x14]
        LDRB     r7,[r3,#0]
        
        SUBS     r10,r5,r8
        RSBMI    r10,r10,#0
        SUBS     r3,r4,r7
        RSBMI    r3,r3,#0
        CMP      r10,r11
        LDR      r11,[sp,#0x60]
        MOVGE    r10,#0
        MOVLT    r10,#1
        CMP      r3,r11
        MOVGE    r3,#0
        MOVLT    r3,#1
        STR      r3,[sp,#8]
        LDR      r3,[sp,#0xc];
        ;if(str != 4)
        MOV      lr,r10
        ADD      r10,r4,r5
        CMP      r3,#4
        
        BEQ      |L1.512|
        LDR      r3,[sp,#0x64]
        LDR      r11,[sp,#0xc];todo
        LDR      r6,[sp,#8];
        
        LDRB     r3,[r3,r11]
        SUB      r11,r1,r12
        ADD      r9,r11,r9,LSL #2
        ADD      r9,r9,#4
        MOVS     r9,r9,ASR #3
        BEQ      |L1.384|
        
        
        
        ADD      r6,r3,r6
        ADD      r11,r6,lr
        CMP      r9,r11
        MOVGT    r9,r11
        RSB      r11,r11,#0
        CMP      r9,r11
        MOVLT    r9,r11
        
        LDR      r11,[sp,#0x68]
        LDR      r6,[sp,#0x18]
        ADD      r4,r4,r9
        LDRB     r4,[r11,r4];todo
        
        
        LDR      r11,[sp,#0x68];
        STRB     r4,[r6,#0]
        SUB      r4,r5,r9
        
        LDRB     r4,[r11,r4]
        STRB     r4,[r0,#0]
|L1.384|
        LDR      r11,[sp,#8]
        ADD      r4,r10,#1
        ADD      r4,r7,r4,ASR #1
        CMP      r11,#0
        BEQ      |L1.452|
        
        RSBS     r1,r1,r4,ASR #1
        BEQ      |L1.452|
        LDR      r6,[sp,#0x1c]
        CMP      r1,r3
        MOVGT    r1,r3
        RSB      r4,r3,#0
        LDRB     r6,[r6,#0]
        CMP      r1,r4
        MOVLT    r1,r4
        LDR      r4,[sp,#0x1c];todo
        
        ADD      r1,r6,r1
        
        STRB     r1,[r4,#0]
|L1.452|
        CMP      lr,#0
        BEQ      |L1.760|
        ADD      r1,r10,#1
        ADD      r1,r8,r1,ASR #1
        RSBS     r1,r12,r1,ASR #1
        BEQ      |L1.760|
        LDRB     r6,[r0,r2]
        CMP      r1,r3
        MOVGT    r1,r3
        RSB      r3,r3,#0
        CMP      r1,r3
        MOVLT    r1,r3
        
        ADD      r1,r6,r1
        STRB     r1,[r0,r2]
        B        |L1.760|
|L1.512|
        LDR      r3,[sp,#0x20]
        LDR      r9,[sp,#0x10];todo
        ADD      r6,r10,r12
        
        
        CMP      r3,r9
        MOVLE    r3,#0
        MOVGT    r3,#1
        TST      lr,r3
        BEQ      |L1.616|
        
        
        ADD      r9,r1,r6,LSL #1
        ADD      r9,r9,r8
        ADD      r9,r9,#4
        MOV      r9,r9,ASR #3
        ADD      r5,r6,r8
        STRB     r9,[r0,#0]
        ADD      r9,r5,#2
        MOV      r9,r9,ASR #2
        STRB     r9,[r0,r2]
        LDR      r9,[sp,#0]
        LDRB     r9,[r0,r9]
        ADD      r8,r9,r8
        ADD      r5,r5,r8,LSL #1
        ;LDR      r8,[sp,#4]
        MOV      r8,r2,LSL #1
        ADD      r5,r5,#4
        MOV      r5,r5,ASR #3
        STRB     r5,[r0,r8]
        B        |L1.636|
|L1.616|
        ADD      r5,r5,r12,LSL #1
        ADD      r5,r5,r1
        ADD      r5,r5,#2
        MOV     r5,r5,ASR #2
        STRB     r5,[r0,#0]
|L1.636|
        LDR      r11,[sp,#8];todo
        ADD      r6,r10,r1
        
        
        TST      r11,r3
        BEQ      |L1.736|
       
        ADD      r3,r12,r6,LSL #1
        ADD      r3,r3,r7
        LDR      r11,[sp,#0x18]
        ADD      r3,r3,#4
        MOV      r3,r3,ASR #3
        STRB     r3,[r11,#0]
        ADD      r1,r6,r7
        LDR      r4,[sp,#0x1c]
        ADD      r3,r1,#2
        MOV      r3,r3,ASR #2
        STRB     r3,[r4,#0]
        ;LDR      r8,[sp,#4]
        MOV      r8,r2,LSL #1
        SUB      r3,r0,r8,LSL #1
        LDRB     r6,[r3,#0]
        LDR      r3,[sp,#0x14]
        ADD      r6,r6,r7
        ADD      r1,r1,r6,LSL #1
        
        ADD      r1,r1,#4
        MOV      r1,r1,ASR #3
        STRB     r1,[r3,#0]
        B        |L1.760|
|L1.736|
		LDR      r11,[sp,#0x18]
        ADD      r1,r4,r1,LSL #1
        ADD      r1,r1,r12
        
        ADD      r1,r1,#2
        MOV      r1,r1,ASR #2
        STRB     r1,[r11,#0]
|L1.760|
		LDR		 r6,[sp,#0x4]
        LDR      r3,[sp,#0x34]
        ADD      r6,r6,#1
        CMP      r6,#0x10
        ADD      r0,r0,r3
        BLT      |L1.56|
        ADD      sp,sp,#0x38
        ;POP      {r4-r11,pc}
		ldmfd   r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15} ;  
        ENDP



    


        EXPORT Luma_InPlaceDeblock

       
        END
