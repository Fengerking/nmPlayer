// voPlugInIE.idl : type library source for ActiveX Control project.

// This file will be processed by the MIDL compiler tool to
// produce the type library (voPlugInIE.tlb) that will become a resource in
// voPlugInIE.ocx.

#include <olectl.h>
#include <idispids.h>

[ uuid(3F09DD6A-A436-4023-9EFA-7D7E0E07FF16), version(1.0),
  helpfile("voPlugInIE.hlp"),
  helpstring("voPlugInIE ActiveX Control module"),
  control ]
library voPlugInIELib
{
	importlib(STDOLE_TLB);

	//  Primary dispatch interface for CvoPlugInIECtrl

	[ uuid(48B7F877-8D2B-4516-A46B-D5143CEBFCDC),
	  helpstring("Dispatch interface for voPlugInIE Control")]
	dispinterface _DvoPlugInIE
	{
		properties:
      [id(10) , helpstring("property version")] BSTR version;
  methods:
      //player control
      [id(1), helpstring("method open")] ULONG open(BSTR cstrUrl, ULONG flag, ULONG sourceType, BSTR openParam);
      [id(2), helpstring("method close")] ULONG close(void);
      [id(3), helpstring("method start")] ULONG start(void);
      [id(4), helpstring("method pause")] ULONG pause(void);
      [id(5), helpstring("method stop")] ULONG stop(void);
      [id(7), helpstring("method setPosition")] LONG setPosition(LONG lMSec);
      [id(8), helpstring("method getPosition")] LONG getPosition(void);
      [id(6), helpstring("method getDuration")] LONG getDuration(void); 
      [id(17), helpstring("method setVolume")] ULONG setVolume(FLOAT fLeftVol, FLOAT fRightVol);
      [id(47), helpstring("method getVolume")] ULONG getVolume();
      [id(13), helpstring("method mute")] ULONG mute(void);
      [id(14), helpstring("method unmute")] ULONG unmute(void);
      [id(22), helpstring("method setVideoAspectRatio")] ULONG setVideoAspectRatio(ULONG ar);
      [id(9), helpstring("method getPlayerStatus")] ULONG getPlayerStatus(void);
      [id(12), helpstring("method canBePaused")] VARIANT_BOOL canBePaused(void);

      //Player Configuration
      [id(23), helpstring("method setLicenseContent")] ULONG setLicenseContent(BSTR data);
      [id(24), helpstring("method setPreAgreedLicense")] ULONG setPreAgreedLicense(BSTR str);
      [id(25), helpstring("method setLicenseFilePath")] ULONG setLicenseFilePath(BSTR path);
      [id(26), helpstring("method enableDeblock")] ULONG enableDeblock(VARIANT_BOOL bEnable);
      [id(27), helpstring("method setDeviceCapabilityByFile")] ULONG setDeviceCapabilityByFile(BSTR filePath);
      [id(28), helpstring("method setInitialBitrate")] ULONG setInitialBitrate(ULONG bitrate);
      [id(29), helpstring("method getMinPosition")] LONG getMinPosition(void);
      [id(30), helpstring("method getMaxPosition")] LONG getMaxPosition(void);

      //Player Asset Selection
      [id(31), helpstring("method getVideoCount")] ULONG getVideoCount(void);
      [id(32), helpstring("method getAudioCount")] ULONG getAudioCount(void);
      [id(33), helpstring("method getSubtitleCount")] ULONG getSubtitleCount(void);
      [id(34), helpstring("method selectVideo")] ULONG selectVideo(ULONG index);
      [id(35), helpstring("method selectAudio")] ULONG selectAudio(ULONG index);
      [id(36), helpstring("method selectSubtitle")] ULONG selectSubtitle(ULONG index);
      [id(37), helpstring("method isVideoAvailable")] VARIANT_BOOL isVideoAvailable(ULONG index);
      [id(38), helpstring("method isAudioAvailable")] VARIANT_BOOL isAudioAvailable(ULONG index);
      [id(39), helpstring("method isSubtitleAvailable")] VARIANT_BOOL isSubtitleAvailable(ULONG index);
      [id(40), helpstring("method commitSelection")] ULONG commitSelection(void);
      [id(41), helpstring("method clearSelection")] ULONG clearSelection(void);
      [id(42), helpstring("method getVideoProperty")] BSTR getVideoProperty(ULONG index);
      [id(43), helpstring("method getAudioProperty")] BSTR getAudioProperty(ULONG index);
      [id(44), helpstring("method getSubtitleProperty")] BSTR getSubtitleProperty(ULONG index);
      [id(45), helpstring("method getPlayingAsset")] BSTR getPlayingAsset();

      // other interface    
      [id(18), helpstring("method FullScreen")] ULONG FullScreen(void);
      [id(65), helpstring("method registerEventHandler")] ULONG registerEventHandler(IDispatch* pDispatch);
      [id(94), helpstring("method setOnEventHandler")] ULONG setOnEventHandler(IDispatch* pDispatch);

      [id(48), helpstring("method setSubtitlePath")] ULONG setSubtitlePath(BSTR filePath);
      [id(49), helpstring("method enableSubtitle")] ULONG enableSubtitle(VARIANT_BOOL value);
      [id(50), helpstring("method setSubtitleFontColor")] ULONG setSubtitleFontColor(ULONG color);
      [id(51), helpstring("method setSubtitleFontOpacity")] ULONG setSubtitleFontOpacity(ULONG alpha);
      [id(52), helpstring("method setSubtitleFontSizeScale")] ULONG setSubtitleFontSizeScale(ULONG scale);
      [id(53), helpstring("method setSubtitleFontBackgroundColor")] ULONG setSubtitleFontBackgroundColor(ULONG color);
      [id(54), helpstring("method setSubtitleFontBackgroundOpacity")] ULONG setSubtitleFontBackgroundOpacity(ULONG alpha);
      [id(55), helpstring("method setSubtitleWindowBackgroundColor")] ULONG setSubtitleWindowBackgroundColor(ULONG color);
      [id(56), helpstring("method setSubtitleWindowBackgroundOpacity")] ULONG setSubtitleWindowBackgroundOpacity(ULONG alpha);
      [id(57), helpstring("method setSubtitleFontItalic")] ULONG setSubtitleFontItalic(VARIANT_BOOL enable);
      [id(58), helpstring("method setSubtitleFontBold")] ULONG setSubtitleFontBold(VARIANT_BOOL enable);
      [id(59), helpstring("method setSubtitleFontUnderline")] ULONG setSubtitleFontUnderline(VARIANT_BOOL enable);
      [id(60), helpstring("method setSubtitleFontName")] ULONG setSubtitleFontName(BSTR name);
      [id(61), helpstring("method setSubtitleFontEdgeType")] ULONG setSubtitleFontEdgeType(ULONG type);
      [id(62), helpstring("method setSubtitleFontEdgeOpacity")] ULONG setSubtitleFontEdgeOpacity(ULONG type);
      [id(63), helpstring("method resetSubtitleParameter")] ULONG resetSubtitleParameter(void);
      [id(64), helpstring("method setSubtitleFontEdgeColor")] ULONG setSubtitleFontEdgeColor(ULONG color);
      [id(66), helpstring("method setHTTPHeader")] ULONG setHTTPHeader(BSTR headerName, BSTR headerValue);
      [id(67), helpstring("method setHTTPProxy")] ULONG setHTTPProxy(BSTR proxy);
      [id(68), helpstring("method EnableAnalytics")] ULONG EnableAnalytics(LONG cacheTime);
      [id(69), helpstring("method StartAnalyticsNotification")] ULONG StartAnalyticsNotification(LONG interval, BSTR filter);
      [id(70), helpstring("method StopAnalyticsNotification")] ULONG StopAnalyticsNotification(void);
      [id(71), helpstring("method GetAnalytics")] BSTR GetAnalytics(BSTR filter);
      [id(72), helpstring("method setAudioPlaybackSpeed")] ULONG setAudioPlaybackSpeed(FLOAT fSpeed);
      [id(74), helpstring("method isLiveStreaming")] VARIANT_BOOL isLiveStreaming(void);
      [id(75), helpstring("method isFullScreen")] VARIANT_BOOL isFullScreen(void);
      [id(76), helpstring("method setPresentationDelay")] ULONGLONG setPresentationDelay(ULONGLONG time);
      [id(77), helpstring("method toggleOverlayUI")] ULONGLONG toggleOverlayUI(VARIANT_BOOL shown);
      [id(78), helpstring("method getCurrentSelection")] BSTR getCurrentSelection(void);
      [id(79), helpstring("method setAnewBufferingTime")] ULONGLONG setAnewBufferingTime(LONG milliseconds);
      [id(80), helpstring("method enableAudioStream")] ULONG enableAudioStream(VARIANT_BOOL bEnable);
      [id(81), helpstring("method enableAudioEffect")] ULONG enableAudioEffect(VARIANT_BOOL bEnable);
      [id(82), helpstring("method setDRMVerificationInfo")] ULONG setDRMVerificationInfo(BSTR info);
      [id(83), helpstring("method getDRMUniqueIndentifier")] BSTR getDRMUniqueIndentifier(void);
      [id(84), helpstring("method setDRMUniqueIndentifier")] ULONG setDRMUniqueIndentifier(BSTR pid);
      [id(86), helpstring("method setDRMLibrary")] ULONG setDRMLibrary(BSTR libName, BSTR libApiName);
      [id(87), helpstring("method getParameter")] ULONG getParameter(ULONG nID, BYTE* pParam);
      [id(88), helpstring("method setParameter")] ULONG setParameter(ULONG nID, BYTE* pParam);
      [id(89), helpstring("method init")] ULONG init(ULONG engineType, BSTR initParam);
      [id(90), helpstring("method setView")] ULONG setView(BYTE* pView);
      [id(91), helpstring("method setDisaplayArea")] ULONG setDisaplayArea(BYTE* pArea);
      [id(92), helpstring("method suspend")] ULONG suspend(void);
      [id(93), helpstring("method resume")] ULONG resume(void);
      [id(95), helpstring("method enableLiveStreamingDVRPosition")] ULONG enableLiveStreamingDVRPosition(VARIANT_BOOL enable);
      [id(96), helpstring("method getAudioDecodingBitrate")] BSTR getAudioDecodingBitrate(void);
      [id(97), helpstring("method getVideoDecodingBitrate")] BSTR getVideoDecodingBitrate(void);
      [id(98), helpstring("method setDRMUniqueIdentifier")] ULONG setDRMUniqueIdentifier(BSTR pid);
      [id(99), helpstring("method getDRMUniqueIdentifier")] BSTR getDRMUniqueIdentifier(void);
      [id(100), helpstring("method setInitialBufferTime")] ULONG setInitialBufferTime(LONG time);
      [id(101), helpstring("method enableSEI")] ULONG enableSEI(ULONG flag);
      [id(102), helpstring("method startSEINotification")] ULONG startSEINotification(LONG interval);
      [id(103), helpstring("method stopSEINotification")] ULONG stopSEINotification(void);
      [id(104), helpstring("method getSEIInfo")] BSTR getSEIInfo(LONG time, ULONG flag);
      [id(105), helpstring("method enableCPUAdaptation")] ULONG enableCPUAdaptation(VARIANT_BOOL bEnable);
      [id(106), helpstring("method setBitrateThreshold")] ULONG setBitrateThreshold(LONG upper, LONG lower);
      [id(107), helpstring("method updateSourceURL")] ULONG updateSourceURL(BSTR url);
      [id(108), helpstring("method enableDolbyLibrary")] ULONG enableDolbyLibrary(VARIANT_BOOL bEnable);
      [id(109), helpstring("method getVersion")] BSTR getVersion(LONG moduleType);
      [id(110), helpstring("method setHTTPRetryTimeout")] ULONG setHTTPRetryTimeout(LONG iRetryTime);
      [id(111), helpstring("method setDefaultAudioLanguage")] ULONG setDefaultAudioLanguage(BSTR type);
      [id(112), helpstring("method setDefaultSubtitleLanguage")] ULONG setDefaultSubtitleLanguage(BSTR type);
};

	//  Event dispatch interface for CvoPlugInIECtrl

	[ uuid(89CB9BC4-5F55-430E-996C-34A43D41D344),
	  helpstring("Event interface for voPlugInIE Control") ]
	dispinterface _DvoPlugInIEEvents
	{
		properties:
			//  Event interface has no properties

		methods:
	};

	//  Class information for CvoPlugInIECtrl

	[ uuid(CCF8AFFB-DB3F-4CB6-BCD7-D41379AB6D70),
	  helpstring("voPlugInIE Control"), control ]
	coclass voPlugInIE
	{
		[default] dispinterface _DvoPlugInIE;
		[default, source] dispinterface _DvoPlugInIEEvents;
	};

};
