/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <voDRMCommonAPI.h>
#include <VOOSMPDRM.h>
#include <dlfcn.h>

#include "voOSFunc.h"
#include "voType.h"
#include <android/log.h>

#include "vodlfcn.h"
#include "voLog.h"
/* Header for class com_visualon_OSMPPlayerImpl_voOSMPDRM */

#ifndef _Included_com_visualon_OSMPPlayerImpl_voOSMPDRM
#define _Included_com_visualon_OSMPPlayerImpl_voOSMPDRM
#ifdef __cplusplus
extern "C" {
#endif

typedef int         (VO_API * VOCREATDRM)(VOOSMPDRM** pDRM, const char *pPath);
typedef int         (VO_API * VODESTORYDRM)(VOOSMPDRM* pDRM);
VO_PTR g_hDll = 0;
static const char*	g_szosmp_suffix = "_OSMP";

static void * vomtLoadLib (void * pUserData, VO_PCHAR pLibName, VO_S32 nFlag)
{
	void * hDll = NULL;

	hDll = voLoadLibrary (pLibName, RTLD_NOW);

	if (hDll == NULL)
	{
		VOLOGE("Load Library File %s, failed!", pLibName);
	}else
	{
		VOLOGI ("Load Library File %s, Handle %p", pLibName, hDll);
	}

	return hDll;
}

static void * vomtGetAddress (void * pUserData, void * hLib, VO_PCHAR pFuncName, VO_S32 nFlag)
{
	void * ptr = voGetAddressSymbol (hLib, pFuncName);

	VOLOGI( "Func Name: %s  %p" , pFuncName , ptr );
	return ptr;
}
static VO_S32 vomtFreeLib (void * pUserData, void * hLib, VO_S32 nFlag)
{
	VOLOGI ("Free Lib: %0xd", (unsigned int) hLib);
	voFreeLibrary (hLib);
	return 0;
}

int getIntegerValue(JNIEnv * env, jobject value)
{
	jclass clazz = env->FindClass("java/lang/Integer");

	jfieldID field = env->GetFieldID (clazz, "value" , "I");

	return env->GetIntField (value, field);
}

/*
 * Class:     com_visualon_OSMPPlayerImpl_voOSMPDRM
 * Method:    nativeCreatDRM
 * Signature: (Ljava/lang/Integer;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_voOSMPDRM_nativeCreatDRM
  (JNIEnv * env, jobject thiz, jobject pHandle, jstring packagePath , jstring libName)
  {
		VOOSMPDRM* pvoDRMApi;
		VOLOGI("nativeCreatDRM");
		char dllFile[1024];
		VO_S32 nRet = 0;
		memset(dllFile, 0, sizeof(dllFile));
		voSetLibraryParam(VO_PID_LIB_SUFFIX, (void *)g_szosmp_suffix);
		char*	packagename = (char *)env->GetStringUTFChars(packagePath, NULL);
		char*	libname = (char *)env->GetStringUTFChars(libName, NULL);
		strcat(dllFile, packagename);
		strcat(dllFile, libname);
		g_hDll = vomtLoadLib (0, dllFile, RTLD_NOW);
		if (g_hDll == NULL)
			{
				nRet = -1;
				VOLOGE("Failed to load %s.", dllFile);
				return nRet;
			}else
			{
				VOLOGI("Success to load %s.", dllFile);
			}
		VOCREATDRM pAPI = (VOCREATDRM) vomtGetAddress(0, g_hDll, "voCreateDRM", 0);
		if (pAPI == NULL)
		{
			VOLOGI ("@@@@@@ Get function voGetDRMAPI address Error %s \n", dlerror ());
			return -1;
		}

		nRet = pAPI(&pvoDRMApi, packagename);
		jclass clazz = env->FindClass ("java/lang/Integer");
			if (clazz == NULL)
			{
				nRet = -1;
				VOLOGE("Don't get Integer class from env!");
				return nRet;
			}

			jfieldID field = env->GetFieldID (clazz, "value", "I");
			if (field == NULL)
			{
				nRet = -2;
				VOLOGE("Don't get 'value' field of Integer class from env!");
				return nRet;
			}
			env->SetIntField(pHandle,field,(jint)pvoDRMApi);
			VOLOGI("voDRM_GetDRMAPI, return api is %d.", (jint)pvoDRMApi);
			return nRet;
  }

/*
 * Class:     com_visualon_OSMPPlayerImpl_voOSMPDRM
 * Method:    nativeDestoryDRM
 * Signature: (Ljava/lang/Integer;)I
 */
JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_voOSMPDRM_nativeDestoryDRM
  (JNIEnv * env, jobject thiz, jobject pHandle)
  {
	VOLOGI("nativeDestoryDRM");
	VO_S32 nRet = 0;
	VODESTORYDRM pAPI = (VODESTORYDRM) vomtGetAddress(0, g_hDll, "voDestroyDRM", 0);
	jint handle = getIntegerValue(env ,pHandle);
	nRet = pAPI((VOOSMPDRM*)handle);
	vomtFreeLib (0, g_hDll, 0);
	return nRet;

  }

#ifdef __cplusplus
}
#endif
#endif
