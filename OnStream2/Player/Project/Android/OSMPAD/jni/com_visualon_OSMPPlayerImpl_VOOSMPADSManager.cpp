/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "VOOSMPADSManagerJNI.h"
#include "CJavaJNI.h"
#include "voLog.h"

#ifdef _VONAMESPACE
using namespace _VONAMESPACE;
#endif

#include "CJavaParcelWrap.h"
#include "CJavaParcelWrapOSMP.h"
#include "voOnStreamSourceType.h"

#ifndef _Included_com_visualon_OSMPPlayerImpl_VOOSMPADSManager
#define _Included_com_visualon_OSMPPlayerImpl_VOOSMPADSManager

#ifdef __cplusplus
extern "C" {
#endif
    
#undef com_visualon_OSMPPlayerImpl_VOOSMPADSManager_VO_ADSMANAGER_OPENFLAG_PID
#define com_visualon_OSMPPlayerImpl_VOOSMPADSManager_VO_ADSMANAGER_OPENFLAG_PID 1L

    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeInit
    (JNIEnv * env, jobject thiz, jobject context, jstring pSourcePid, jint nSize, jint nFlag, jstring pPartnerString, jstring workingPath, jstring init, jint type)
    {
        VOOSMPADSManagerJNI *pADSManager = new VOOSMPADSManagerJNI();
        if (NULL == pADSManager) {
            return VOOSMP_ERR_OutMemory;
        }
        
        if (0 != pADSManager->SetJavaVM(env, thiz)) {
            delete pADSManager;
            return VOOSMP_ERR_JNI;
        }
        
        int nRet = VOOSMP_ERR_None;
        
        char* path = (char *)env->GetStringUTFChars(workingPath, NULL);
		
        VO_ADSMANAGER_INITPARAM initparam;
        memset(&initparam, 0, sizeof(VO_ADSMANAGER_INITPARAM));
        
        char* name = (char *)env->GetStringUTFChars(init, NULL);
        
		VO_ADSMANAGER_DEVICETYPE deviceType = VO_ADSMANAGER_DEVICETYPE_NONE;
        initparam.ptr_workingpath = (VO_TCHAR *)path;
		if(type == 0)
		{
			deviceType = VO_ADSMANAGER_DEVICETYPE_PHONE;
		}
		else if(type == 1)
		{
			deviceType = VO_ADSMANAGER_DEVICETYPE_TABLET;
		}
        initparam.device_type = deviceType;
		
        char*  sourcepid = (char *)env->GetStringUTFChars(pSourcePid, NULL);
        char*  partner = (char *)env->GetStringUTFChars(pPartnerString, NULL);
        
        VO_ADSMANAGER_SOURCE_PID source;
        memset(&source, 0, sizeof(VO_ADSMANAGER_SOURCE_PID));
        source.pPID = sourcepid;
        source.pPartnerString = partner;
        
        nRet = pADSManager->Init((VO_PTR)&source, nSize, nFlag, &initparam, name);
        VOLOGI("ADS wrapper init VOOSMPADSManagerJNI nRet:%d, pointer:%x", nRet, pADSManager);
        
        CJavaJNI::setIntegerValue(env, context, (int)pADSManager);
        
        return nRet;
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeUninit
    (JNIEnv * env, jobject thiz, jint context)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
        
        int nRet = pADSManager->Uninit();
        
        if (VOOSMP_ERR_None == nRet) {
            delete pADSManager;
        }
        
        return nRet;
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeOpen
    (JNIEnv * env, jobject thiz, jint context)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
        
        return pADSManager->Open();
    }

    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeClose
    (JNIEnv * env, jobject thiz, jint context)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
        
        return pADSManager->Close();
    }
    
    JNIEXPORT jobject JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeGetPlaybackInfo
    (JNIEnv * env, jobject thiz, jint context)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return NULL;
        }
		
        VO_ADSMANAGER_PLAYBACKINFO * playbackinfo = NULL;
        
        VO_U32 nRet = pADSManager->GetPlaybackInfo(&playbackinfo);
        
        if ((VOOSMP_ERR_None != nRet) || (NULL == playbackinfo))
        {
            VOLOGE("ADS wrapper Get playback info failed!!!!");
            return NULL;
        }
        
//        mCount = playbackinfo->nCounts;
//        VOLOGI("nativeGetPlaybackInfo mCount = %d", mCount);
//        for (int n=0; n<(int)playbackinfo->nCounts; n++)
//        {
//            VOLOGE("Get playback info count = %d",playbackinfo->nCounts);
//            VO_ADSMANAGER_PLAYBACKPERIOD* pInfo = &(playbackinfo->pPeriods[n]);
//            if(pInfo)
//            {
//                if(pInfo->nPeriodType == VO_ADSMANAGER_PERIODTYPE_NORMALCONTENT)
//                {
//                    strcpy(mUrl, pInfo->strPeriodURL);
//                    
//                    VOLOGI("URL is %s", pInfo->strPeriodURL);
//                    VOLOGI("Subtitle URL is %s", pInfo->strCaptionURL);
//                    
//                    strcpy(mSubtitleUrl, pInfo->strCaptionURL);
//                    break;
//                }
//                
//            }
//        }
        
        CJavaParcelWrapOSMP wrap(env);
        wrap.fillParcelData((VO_ADSMANAGER_PLAYBACKINFO *)playbackinfo);
        return wrap.getParcel();
    }
    
//    JNIEXPORT jbyteArray JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeGetUrl
//    (JNIEnv * env, jobject thiz, jint context)
//    {
//        jbyteArray array = NULL;
//        array = env->NewByteArray(strlen(mUrl));
//        if (array != NULL) {
//            env->SetByteArrayRegion(array, 0, strlen(mUrl), (jbyte*)mUrl);
//        }
//        return array;
//    }
//    
//    JNIEXPORT jbyteArray JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeGetSubtitleUrl
//    (JNIEnv * env, jobject thiz, jint context)
//    {
//        jbyteArray array = NULL;
//        array = env->NewByteArray(strlen(mSubtitleUrl));
//        if (array != NULL) {
//            env->SetByteArrayRegion(array, 0, strlen(mSubtitleUrl), (jbyte*)mSubtitleUrl);
//        }
//        return array;
//    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeGetTimeStamp
    (JNIEnv * env, jobject thiz, jint context, jint nTimeStamp)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
        
        VO_U64 orgTime = 0;
        VO_U64 timestamp = (VO_U64)nTimeStamp;
        
        VO_U32 nRet = pADSManager->ConvertTimeStamp(&orgTime, timestamp);
        
        if ((VOOSMP_ERR_None != nRet) && (VOOSMP_ERR_ParamID != nRet))
        {
            VOLOGE("ADS wrapper ConvertTimeStamp failed:%x, org:%lld, time:%lld!!!!", nRet, orgTime, timestamp);
            return -1;
        }
        
        return orgTime;
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeSetPlayingTime
    (JNIEnv * env, jobject thiz, jint context, jint currTime)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
		
        VO_U64 currenttime = (VO_U64)currTime;
        VO_U32 nRet = pADSManager->SetPlayingTime(currenttime);

        if (VOOSMP_ERR_None != nRet)
        {
            VOLOGE("ADS wrapper SetPlayingTime failed:%x!!!!", nRet);
        }
        
        return nRet;
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeSetAction
    (JNIEnv * env, jobject thiz, jint context, jint action, jint currTime)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
		
        VO_ADSMANAGER_ACTION adAction = (VO_ADSMANAGER_ACTION)action;
        
        VO_U64 currenttime = (VO_U64)currTime;
        VO_U32 nRet = pADSManager->SetAction(adAction, currenttime);
        
        if (VOOSMP_ERR_None != nRet)
        {
            VOLOGE("ADS wrapper SetAction failed:%x!!!!", nRet);
        }
        
        return nRet;
    } 
    
    JNIEXPORT jbyteArray JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeSetActionSync
    (JNIEnv * env, jobject thiz, jint context, jint action, jint currTime)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return NULL;
        }
		
        VO_ADSMANAGER_ACTION adAction = (VO_ADSMANAGER_ACTION)action;
        
        jbyteArray array = NULL;
        VO_U64 currenttime = (VO_U64)currTime;
        char* param = new VO_CHAR[4096];
        memset(param, 0, sizeof(param));
        
        VO_U32 nRet = pADSManager->SetActionSync(adAction, currenttime, param);
        if (VOOSMP_ERR_None != nRet)
        {
            delete[] param;
            VOLOGE("ADS wrapper SetActionSync return:%x", nRet);
            return array;
        }
        
        array = env->NewByteArray(strlen(param));
        if (array != NULL) {
            env->SetByteArrayRegion(array, 0, strlen(param), (jbyte*)param);
        }
        
        delete[] param;
        
        return array;
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeSetParam
    (JNIEnv * env, jobject thiz, jint context, jint paramID, jobject obj)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
		
        VO_ADSMANAGER_CHUNKSAMPLEINFO csinfo;
        csinfo.uFlag = 0;
        csinfo.ullChunkStartTime = 0;
        csinfo.pullSampleTime = 0;
        
        VO_U32 nRet = 0;
        
        jclass clazz = env->GetObjectClass(obj);
		if (clazz == NULL)
		{
			nRet = VOOSMP_ERR_JNI;
			return nRet;
		}
        
		if (paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE)
		{
			jmethodID mid = env->GetMethodID (clazz, "getFlag", "()I");
			if (mid == NULL)
			{
                VOLOGE("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE getFlag JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.uFlag = env->CallIntMethod (obj, mid);
			
			VOLOGI("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE csinfo.uFlag = %d",csinfo.uFlag);
			
			jmethodID mid1 = env->GetMethodID (clazz, "getChunkStartTime", "()J");
			if (mid1 == NULL)
			{
                VOLOGE("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE getChunkStartTime JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.ullChunkStartTime = env->CallLongMethod (obj, mid1);
			VOLOGI("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE csinfo.ullChunkStartTime = %lld",csinfo.ullChunkStartTime);
            
            jmethodID mid2 = env->GetMethodID (clazz, "getPeriodSequenceNumber", "()I");
			if (mid2 == NULL)
			{
                VOLOGE("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE getPeriodSequenceNumber JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.uPeriodSequenceNumber = env->CallIntMethod (obj, mid2);
			VOLOGI("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE csinfo.ullChunkStartTime = %lld",csinfo.ullChunkStartTime);
			
            jmethodID midPeriodFirstChunkStartTime = env->GetMethodID (clazz, "getPeriodFirstChunkStartTime", "()J");
			if (midPeriodFirstChunkStartTime == NULL)
			{
                VOLOGE("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE getPeriodFirstChunkStartTime JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.ullPeriodFirstChunkStartTime = env->CallLongMethod (obj, midPeriodFirstChunkStartTime);
			VOLOGI("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE csinfo.ullChunkStartTime = %lld",csinfo.ullChunkStartTime);
            
			jmethodID mid3 = env->GetMethodID (clazz, "getSampleTimePointer", "()I");
			if (mid3 == NULL)
			{
                VOLOGE("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE getSampleTimePointer JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.pullSampleTime = (VO_U64*)(env->CallIntMethod (obj, mid3));
			VOLOGI("ADS wrapper nativeSetParam paramID == VO_ADSMANAGER_PID_DISCONTINUESAMPLE csinfo.pullSampleTime = %d", (int)(csinfo.pullSampleTime));
			
            nRet = pADSManager->SetParam(paramID, &csinfo);
		}
		else if(paramID == VO_ADSMANAGER_PID_DISCONTINUECHUNK)
		{
			jmethodID mid = env->GetMethodID (clazz, "Reserved2", "()I");
			if (mid == NULL)
			{
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.uFlag = env->CallIntMethod (obj, mid);
			VOLOGI("ADS wrapper nativeSetParam paramID == VOOSMP_SRC_ADAPTIVE_STREAMING_INFO_EVENT_CHUNK_BEGINDOWNLOAD csinfo.uFlag = %ld",csinfo.uFlag);
			
			jmethodID mid1 = env->GetMethodID (clazz, "StartTime", "()J");
			if (mid1 == NULL)
			{
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			
			jmethodID mid2 = env->GetMethodID (clazz, "TimeScale", "()J");
			if (mid2 == NULL)
			{
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			
			long temp1 = env->CallLongMethod (obj, mid1);
			VOLOGI("ADS wrapper nativeSetParam paramID == VOOSMP_SRC_ADAPTIVE_STREAMING_INFO_EVENT_CHUNK_BEGINDOWNLOAD temp1 = %ld",temp1);
			long temp2 = env->CallLongMethod (obj, mid2);
			VOLOGI("ADS wrapper nativeSetParam paramID == VOOSMP_SRC_ADAPTIVE_STREAMING_INFO_EVENT_CHUNK_BEGINDOWNLOAD temp2 = %ld",temp2);
			
			csinfo.ullChunkStartTime = temp1 / temp2 * 1000;
			
            jmethodID mid3 = env->GetMethodID (clazz, "PeriodSequenceNumber", "()I");
			if (mid3 == NULL)
			{
                VOLOGE("ADS wrapper get PeriodSequenceNumber JNI error");
				nRet = VOOSMP_ERR_JNI;
				return nRet;
			}
			csinfo.uPeriodSequenceNumber = env->CallIntMethod (obj, mid3);
            
			csinfo.pullSampleTime = 0;
			
            nRet = pADSManager->SetParam(paramID, &csinfo);
		}
        else {
            nRet = pADSManager->SetParam(paramID, 0);
        }
        
        return nRet;
    }
    
    JNIEXPORT jboolean JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeIsSeekable
    (JNIEnv * env, jobject thiz, jint context, jint currTime)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return false;
        }
		
        VO_U64 currenttime = (VO_U64)currTime;
        return pADSManager->IsSeekable(currenttime);
    }
    
    JNIEXPORT jint JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeGetContentDuration
    (JNIEnv * env, jobject thiz, jint context)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return VOOSMP_ERR_Pointer;
        }
		
        VO_U64 nDuration = -1;
        VO_U32 nRet = pADSManager->GetContentDuration(&nDuration);
        
        if (VOOSMP_ERR_None != nRet)
        {
            VOLOGE("ADS wrapper GetContentDuration nRet:%d", nRet);
            return -1;
        }
        
        return nDuration;
    }
    
    JNIEXPORT jobject JNICALL Java_com_visualon_OSMPPlayerImpl_VOOSMPADSManager_nativeSeek
    (JNIEnv * env, jobject thiz, jint context, jint currTime, jint seekPos)
    {
        VOOSMPADSManagerJNI* pADSManager = (VOOSMPADSManagerJNI*) context;
        if (pADSManager == NULL)
        {
            return NULL;
        }
        
        VO_U64 nPlaying = currTime;
        VO_U64 nSeek = seekPos;
        VO_ADSMANAGER_SEEKINFO cInfo;
        memset(&cInfo, 0, sizeof(cInfo));
        
        VOLOGI("ADS wrapper Seek start:%lld,%lld",nPlaying, nSeek);
        VO_U32 nRet = pADSManager->Seek(nPlaying, nSeek, &cInfo);
        
        if (VOOSMP_ERR_None != nRet)
        {
            VOLOGE("ADS wrapper Seek nRet:%d", nRet);
            return NULL;
        }
        
        CJavaParcelWrapOSMP wrap(env);
        wrap.fillParcelData((VO_ADSMANAGER_SEEKINFO *)&cInfo);
        
        VOLOGI("ADS wrapper Seek value:%lld, %lld", cInfo.uAdsSequnceNumber, cInfo.ullContentSeekPos);
        
        return wrap.getParcel();
    }
    
#ifdef __cplusplus
}
#endif

#endif
