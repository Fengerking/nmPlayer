@************************************************************************
@									                                    *
@	VisualOn, Inc. Confidential and Proprietary, 2010		            *
@	written by Rock							 	                        *
@***********************************************************************/	
	@AREA	|.rdata|, DATA, READONLY
	#include "voYYDef_CC.h"
	.section .rdata
	.global		cc_argb32_mb_16x16_180_arm
	@.extern		ccClip255
	@AREA	|.text|, CODE, READONLY
	.section .text

  .macro   cc_argb32_mb_16x16_180_arm_num_count Num
		ldr  r9, =0x645a1				@r9 = ConstU2
		ldr  r8, =0x2045a1				@r8 = ConstU1				
		ldrb r6, [r1, #(\Num)]			@r6 = psrc_u[num]		
		ldrb r7, [r2, #(\Num)]			@r7 = psrc_v[num]					
		ldrb r10, [r0, #(\Num*2 )]		@r10 = psrc_y[2*num]
		ldr	 r12, =0x129fbe				@r12 = ConstY						
		sub  r6, r6, #128				@r6 = a0
		mul	 r9, r6, r9					@r9 = a0 *ConstU2
		sub  r10, r10, #16
		mul	 r10, r12, r10				@*********r10 = a3 = (psrc_y[2*num] - 16)*ConstY@
		ldr	 r11, =0xD020C				@r11 = ConstV2					
		sub	 r7, r7, #128				@r7 = a1			
		mul  r6, r8, r6					@*********r6 = a2 = (a0 * ConstU1)@		
		ldr  r8, =0x198937				@r8 = ConstV1
		mla  r11, r7, r11, r9			@*********r11 = a0 = (a1 * ConstV2 + a0 *ConstU2)@
		add  r9, r10, r6				@*********r9 = (a3 + a2)
		mul  r7, r8, r7					@*********r7 = a1 = (a1 * ConstV1)@

		ldrb r9, [r14, +r9, asr #20]		@r9 = ccClip255[((a3 + a2)>>20)]
		add	 r8, r10, r7
		sub	 r10, r10, r11
		ldrb r10, [r14, +r10,asr #20]		@r10 = a5  = (ccClip255[((a3 - a0)>>20)])@
		ldrb r8, [r14, +r8, asr #20]		@r8 = ccClip255[((a3 + a1)>>20)]						
        orr  r10, r8, r10, lsl #8           @r10 = (a5<<8)|a3   		
        orr  r10, r10, r9, lsl #16          @********r10 = a4 = (a4<<16)|(a5<<8)|a3@
        
        mov  r9, #0xff
        orr  r10, r10, r9, lsl #24
        
        ldrb r9, [r0, #((\Num*2) + 1)]		@r7 = psrc_y[(2*num + 1)]     
        str	 r10, [r4, #(60 - (\Num)*8)]		@*((VO_S32*)(out_buf+(4*num))) = (VO_S32)a4@
        sub	 r9, r9, #16
		mul	 r9, r12, r9					@r9 = a3 = (psrc_y[(2*nu + 1)] - 16)*ConstY@
		
		add	 r8, r9, r6	
		ldrb r8, [r14, +r8, asr #20]		@r8 = ccClip255[((a3 + a2)>>20)]			
		add	 r12, r9, r7
		ldrb r12, [r14, +r12, asr #20]		@r12 = ccClip255[((a3 + a1)>>20)]
		sub	 r9, r9, r11
		ldrb r9, [r14, +r9, asr #20]		@r9 = a3  = (ccClip255[((a3 - a0)>>20)])@			
    	orr  r9, r9, r8, lsl #8           	@********r9 = a3 |= (a5<<8)@
    	orr  r8, r12, r9,lsl #8
    	
    	mov  r9, #0xff
      orr  r8, r8, r9, lsl #24
			
		add	 r10, r0, r3					@r8 = psrc_y+in_stride
		ldrb r10, [r10, #((\Num)*2 )]			@r10 = psrc_y[in_stride+2*num]
				
		ldr	 r12, =0x129fbe					@r12 = ConstY		
			
    	str	 r8, [r4, #(56 - (\Num)*8)]		@*((VO_S32*)(out_buf+(4*num))) = (VO_S32)a4@
    	sub	 r10, r10, #16	
		mul	 r10, r12, r10					@*********r10 = a3 = (psrc_y[in_stride+2*nu] - 16)*ConstY@		
		add	 r9, r10, r6					@*********r9 = (a3 + a2)	
		
		ldrb r9, [r14, +r9, asr #20]		@r9 = ccClip255[((a3 + a2)>>20)]
		add	 r8, r10, r7
		sub	 r10, r10, r11
		ldrb r10, [r14, +r10,asr #20]		@r10 = a5  = (ccClip255[((a3 - a0)>>20)])@
		ldrb r8, [r14, +r8,  asr #20]		@r8 = ccClip255[((a3 + a1)>>20)]						
        orr  r10, r8, r10, lsl #8           @r10 = (a5<<8)|a3       		
        orr  r10, r10, r9, lsl #16          @********r10 = a4 = (a4<<16)|(a5<<8)|a3@
        
        mov  r9, #0xff
        orr  r10, r10, r9, lsl #24
        
        add	 r9, r0, r3						@r8 = psrc_y+in_stride        	
		ldrb r9, [r9, #((\Num*2) + 1)]		@r7 = psrc_y[(in_stride+2*num + 1)] 
        sub	 r8,  r4, r5						@r8 = out_buf+out_stride
        str	 r10, [r8, #(60 - (\Num)*8)]		@*((VO_S32*)(out_buf+(out_stride+4*num))) = (VO_S32)a4@	
        sub	 r9, r9, #16
		mul	 r9, r12, r9					@r9 = a3 = (psrc_y[(2*nu + 1)] - 16)*ConstY@
		
		add	 r8, r9, r6	
		ldrb r8, [r14, +r8, asr #20]		@r8 = ccClip255[((a3 + a2)>>20)]			
		add	 r12, r9, r7
		ldrb r12, [r14, +r12, asr #20]		@r12 = ccClip255[((a3 + a1)>>20)]
		sub	 r9, r9, r11
		ldrb r9, [r14, +r9, asr #20]		@r9 = a3  = (ccClip255[((a3 - a0)>>20)])@			
        orr  r9, r9, r8, lsl #8           	@********r9 = a3 |= (a5<<8)@
        orr  r9, r12, r9,lsl #8
        
        mov  r10, #0xff
        orr  r9, r9, r10, lsl #24
        
        sub	 r8, r4, r5						@r8 = out_buf+out_stride							        	
        str	 r9, [r8, #(56 - (\Num)*8)]		@*((VO_S32*)(out_buf+(out_stride+4*num))) = (VO_S32)a4@						
  .endm   	
						
@ccClip255_DATA_D_180:	.word       ccClip255
	.align 4
ccClip255_DATA_D_180_0:
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
	.byte  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    0,   0,   0,   0,   0
ccClip255_DATA_D_180:
	.byte  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15  
	.byte  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31  
	.byte  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47  
	.byte  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63 
	.byte  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79
	.byte  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95 
	.byte  96,  97,  98,  99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111 
	.byte  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127 
	.byte  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143
	.byte  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159  
	.byte  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175  
	.byte  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191  
	.byte  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207 
	.byte  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223  
	.byte  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239 
	.byte  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255  
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255 
	.byte  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,  255		
cc_argb32_mb_16x16_180_arm: @PROC
	stmdb	sp!, {r4-r11, lr}		@ save regs used
	sub	    sp, sp, #32				@ sp - 32
	ldr    	r4, [sp, #68]			@r4 = out_buf
	ldr	    r5, [sp, #72]			@r5 = out_stride				
	adr  	r14,ccClip255_DATA_D_180
	@ldr	    r14, [r14]				@r14 = ccClip63		
	mov  	r12, #8					@ a6 = 8
	add		r4, r4, r5, asl	#4
	sub		r4, r4, r5
	str	    r12, [sp, #4]	
ARGB32_BIG_WHILE_dis:
	cc_argb32_mb_16x16_180_arm_num_count 0
	cc_argb32_mb_16x16_180_arm_num_count 1
	cc_argb32_mb_16x16_180_arm_num_count 2
	cc_argb32_mb_16x16_180_arm_num_count 3
	cc_argb32_mb_16x16_180_arm_num_count 4
	cc_argb32_mb_16x16_180_arm_num_count 5
	cc_argb32_mb_16x16_180_arm_num_count 6
	cc_argb32_mb_16x16_180_arm_num_count 7

	ldr		r6, [sp, #84]		@uin_stride
	ldr		r7, [sp, #88]		@vin_stride
	ldr		r12,[sp, #4]
	sub		r4, r4, r5, asl	#1
	subs	r12, r12, #1
	strne	r12, [sp, #4]
	add		r0, r0, r3, asl	#1
	add		r1, r1, r6
	add		r2, r2, r7		

	bne		ARGB32_BIG_WHILE_dis

    add     sp, sp, #32
	ldmia	sp!, {r4-r11, pc}		@ restore and return 

	@ENDP  @
		

.END
